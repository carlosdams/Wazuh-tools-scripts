# CloudFormation template for latest official CentOS7 AMI with no Wazuh installed and no Agents but Security Groups already created for Linux and Windows. 
#CentOS7 image AMI info: https://aws.amazon.com/marketplace/pp/prodview-foff247vr2zfw?ref_=aws-mp-console-subscription-detail
#This builds the VPC 172.20.0.0/16 and subnet 172.20.0.0/24 assigning IP address 172.20.0.10 to CentOS7 Server by default
#version 2023-07-03
# Author: Carlos Dams
Parameters:
  WorkstationIp:
    Type: String
    Description: The IP address of the workstation that can RDP and SSH into the instances. Have 0.0.0.0/0 to allow any IP address.
    Default: '0.0.0.0/0'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP address of the form x.x.x.x/x
  AmiAliasServerCentOS7Server:
    Description: AMI alias of Linux CentOS7
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/marketplace/prod-a77hqdkwpdk3o/latest'
  CidrBlockVPC: 
    Description: CIDR block of the VPC
    Type: 'String'
    Default: '172.20.0.0/16'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP address of the form x.x.x.x/x
  CidrBlockSubnet: 
    Description: CIDR block of the Public Subnet
    Type: 'String'
    Default: '172.20.0.0/24'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP address of the form x.x.x.x/x
  PrivateAddressCentOS7Server:
    Description: Private IP Address of CentOS 7 Server
    Type: 'String'
    Default: '172.20.0.10'
    MinLength: 7
    MaxLength: 15
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: must be a valid IP address of the form x.x.x.x
  CidrBlockWazuhAgentsEnrollment: 
    Description: CIDR block of the network that new Wazuh Agents can enroll (this does not affect the ones in this template), this will likely be the same as CidrBlockWazuhAgentsCommunication
    Type: 'String'
    Default: '0.0.0.0/0'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP address block of the form x.x.x.x/x - Keep 0.0.0.0/0 to allow any IP address.
  CidrBlockWazuhAgentsCommunication: 
    Description: CIDR block of the network that new Wazuh Agents can communicate (this does not affect the ones in this template), this will likely be the same as CidrBlockWazuhAgentsEnrollment
    Type: 'String'
    Default: '0.0.0.0/0'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP address block of the form x.x.x.x/x - Keep 0.0.0.0/0 to allow any IP address.
  CidrBlockWazuhWebUIAccess: 
    Description: CIDR block of the network that can access the Wazuh Web UI
    Type: 'String'
    Default: '0.0.0.0/0'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP address block of the form x.x.x.x/x - Keep 0.0.0.0/0 to allow any IP address.
  CentOS7ServerInstanceType:
    Description: EC2 Instance type of CentOS7 #c5a.xlarge vendor recommended for Wazuh AIO AMI, c5a.large or t2.medium to save money, t2.micro vendor recommended for CentOS
    Type: String
    Default: t2.medium
    AllowedValues:
    - c5a.large #bare minimum 2vCPU and 4GB RAM
    - c5a.xlarge #recommended 4vCPU and 8GB RAM
    - t2.micro #1vCPU and 1GB RAM
    - t2.small #1vCPU and 2GB RAM
    - t2.medium #bare minimum 2vCPU and 4GB RAM, cheapest option 
    - t2.large #2vCPU and 8GB RAM 
    - t2.xlarge #4vCPU and 16GB RAM
    ConstraintDescription: must be a valid EC2 instance type.
  CentOS7ServerInstanceMarketTypeParameter:
   Description: Choose between on-demand and spot instances.
   Type: String
   Default: spot
   AllowedValues:
    - spot
    - on-demand
  OpenWazuhAPIToWorkStationIp:
    Description: If Yes is selected the Wazuh API (port 55000) will be reachable from the WorkstationIp specified.
    Default: 'No'
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
  OpenOpenSearchAPIToWorkStationIp:
    Description: If Yes is selected the OpenSearch API (port 9200) will be reachable from the WorkstationIp specified. It might be neccessary to edit file /etc/wazuh-indexer/opensearch.yml to expose the API
    Default: 'No'
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'

Conditions:
  OpenWazuhAPI: !Equals 
    - !Ref OpenWazuhAPIToWorkStationIp
    - 'Yes'
  OpenOpenSearchAPI: !Equals 
    - !Ref OpenOpenSearchAPIToWorkStationIp
    - 'Yes'
  CentOS7ServerIsOnDemand:
    !Equals [!Ref CentOS7ServerInstanceMarketTypeParameter, "on-demand"]

Resources:
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlockVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
  Subnet:  
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref CidrBlockSubnet
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ '-', [ !Ref LabVPC, 'igw']]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  KeyNameToUse:
    Description: New EC2 Key pair that will be saved on Parameter Store
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: wazuhKeyLab
      Tags: 
        - Key: "Name"
          Value: !Join [ '', [ "Key Pair from " , !Sub "${AWS::StackName}"] ]

 # Wazuh Server AIO (CentOS7Server)

  CentOS7ServerLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: CentOS7ServerInstanceLaunchTemplate
        LaunchTemplateData:
          ImageId: !Ref AmiAliasServerCentOS7Server
          BlockDeviceMappings:
            # /root volume
            - DeviceName: /dev/sda1
              Ebs:
                DeleteOnTermination: true
                VolumeSize: 25
                #VolumeType: gp3
          InstanceMarketOptions:
            !If 
                - CentOS7ServerIsOnDemand
                - !Ref "AWS::NoValue"
                - MarketType:
                    Ref: CentOS7ServerInstanceMarketTypeParameter

  CentOS7ServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyNameToUse
      InstanceType: !Ref CentOS7ServerInstanceType
      LaunchTemplate:
        Version: 1
        LaunchTemplateId: !Ref CentOS7ServerLaunchTemplate
      Tags:
        - Key: "Name"
          Value: !Join [ '', [ "CentOS7 for Wazuh AIO from " , !Ref AmiAliasServerCentOS7Server] ] 
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: '0'
          SubnetId: !Ref Subnet
          PrivateIpAddress: !Ref PrivateAddressCentOS7Server
          GroupSet:
            - Ref: WazuhManagerSecurityGroup
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash -xe
          hostnamectl set-hostname --static CentOS7Server
          echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

  CentOS7ServerEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties: 
      Domain: vpc
      InstanceId: !Ref CentOS7ServerInstance
  WazuhManagerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22, port 443 for Web and ports for Agent connection
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Sub ${WorkstationIp}
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub ${WorkstationIp}
        - IpProtocol: tcp
          FromPort: '1515'
          ToPort: '1515'
          CidrIp: !Sub ${CidrBlockWazuhAgentsEnrollment}
        - IpProtocol: tcp
          FromPort: '1514'
          ToPort: '1514'
          CidrIp: !Sub ${CidrBlockWazuhAgentsCommunication}
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443' #to access Wazuh Web UI
          CidrIp: !Sub ${CidrBlockWazuhWebUIAccess}

  WazuhLinuxAgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Sub ${WorkstationIp}
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub ${WorkstationIp}

  WazuhWindowsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDP access via port 3389 and ICMPv4
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Sub ${WorkstationIp}
        - IpProtocol: icmp #It might be necessary to enable in Windows firewall of the Windows Server the inbound rule "Virtual Machine Monitoring (Echo Request - ICMPv4-In)"
          FromPort: 8
          ToPort: -1
          CidrIp: !Sub ${WorkstationIp}

  WazuhManagerSecurityGroupWazuhAPI:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: OpenWazuhAPI
    DependsOn: WazuhManagerSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 55000
      ToPort: 55000
      CidrIp: !Sub ${WorkstationIp}

  WazuhIndexerSecurityGroupOpenSearchAPI:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: OpenOpenSearchAPI
    DependsOn: WazuhManagerSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 9200
      ToPort: 9200
      CidrIp: !Sub ${WorkstationIp}

# To be able to use the same Security Groups (as a source) created on the previos part

  WazuhManagerSecurityGroupSelfReferencePing:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: WazuhManagerSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId: !Ref WazuhManagerSecurityGroup

  WazuhManagerSecurityGroupSelfReferenceSSHFromManagerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: WazuhManagerSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WazuhManagerSecurityGroup

  WazuhManagerSecurityGroupSelfReferenceSSHFromWindowsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhWindowsSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WazuhWindowsSecurityGroup

  WazuhWindowsSecurityGroupSelfReferencePing:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: WazuhWindowsSecurityGroup
    Properties:
      GroupId: !Ref WazuhWindowsSecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId: !Ref WazuhWindowsSecurityGroup

  WazuhManagerSecurityGroupPingFromWazuhLinuxAgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId: !Ref WazuhLinuxAgentSecurityGroup

  WazuhManagerSecurityGroupSSHFromWazuhLinuxAgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WazuhLinuxAgentSecurityGroup

  WazuhLinuxAgentSecurityGroupPingFromWazuhManagerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhLinuxAgentSecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId: !Ref WazuhManagerSecurityGroup

  WazuhLinuxAgentSecurityGroupSSHFromWazuhManagerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhLinuxAgentSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WazuhManagerSecurityGroup

  WazuhLinuxAgentSecurityGroupSSHFromWindowsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhWindowsSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhLinuxAgentSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WazuhWindowsSecurityGroup

  WazuhLinuxAgentSecurityGroupSelfReferenceSSHFromLinuxAgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhLinuxAgentSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref WazuhLinuxAgentSecurityGroup

  WazuhLinuxAgentSecurityGroupSelfReferencePing:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhLinuxAgentSecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId: !Ref WazuhLinuxAgentSecurityGroup

  WazuhManagerSecurityGroupAgentEnrollmentFromWazuhLinuxAgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 1514
      ToPort: 1515
      SourceSecurityGroupId: !Ref WazuhLinuxAgentSecurityGroup

  WazuhManagerSecurityGroupAgentEnrollmentFromWindowsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhWindowsSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 1514
      ToPort: 1515
      SourceSecurityGroupId: !Ref WazuhWindowsSecurityGroup

  WazuhManagerSecurityGroupAccessWebUIFromWazuhLinuxAgentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhLinuxAgentSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref WazuhLinuxAgentSecurityGroup

  WazuhManagerSecurityGroupAccessWebUIFromWindowsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: 
    - WazuhManagerSecurityGroup
    - WazuhWindowsSecurityGroup
    Properties:
      GroupId: !Ref WazuhManagerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref WazuhWindowsSecurityGroup

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref LabVPC
  CentOS7ServerPublicIP:
    Description: The Public IP address of CentOS7 Server
    Value: !GetAtt CentOS7ServerEIP.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-CentOS7Server-PublicIp"
  CentOS7ServerDNS:
    Description: The link of CentOS7 in case there is a HTTPS Web Server running
    Value: !Join [ '', ["https://", !GetAtt CentOS7ServerInstance.PublicDnsName]]
    Export:
      Name: !Sub "${AWS::StackName}-CentOS7Server-DomainName"
  CentOS7ServerID:
    Description: Image ID
    Value: !Ref CentOS7ServerInstance